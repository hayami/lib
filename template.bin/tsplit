#!/bin/sh
tmp=$(mktemp -d -t ${0##*/} 2> /dev/null)		# BSD mktemp
tmp=${tmp:-$(mktemp -d --tmpdir ${0##*/}.XXXXXXXX)}	# GNU mktemp
trap "rm -rf $tmp" EXIT

usage() {
    if [ "$1" = 0 ]; then
        ret=0
    else
        ret=1
	exec 1>&2
    fi
    cat <<- EOF
	Usage: ${0##*/} [-t] /BEGIN/... /END/... [--] command [args ...]
	    or ${0##*/} /SEPARATOR/ [--] command [args ...]

	Examples:
	       ${0##*/} /BEGIN/ /END/ less < ca-bundle.crt
	       ${0##*/} /BEGIN/+1 /END/-1 less < ca-bundle.crt
	       ${0##*/} /BEGIN/-3 /END/ less < ca-bundle.crt
	       ${0##*/} -t '/^diff /' '/^diff /;/^diff /-1' less < git.diff
	       ${0##*/} '/--- cut here ---/' less < cut-here.txt
	EOF
    exit $ret
}

begin=
end=
separator=
use_tail=false

while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            usage 0
            ;;
        -t)
            use_tail=true
            ;;
        /*/)
            [ -z "$separator" ] && separator="$1"
            if [ -z "$begin" ]; then
                begin="$1"
            elif [ -z "$end" ]; then
                end="$1"
            else
                usage 1
            fi
            ;;
        /*)
            if [ -z "$begin" ]; then
                begin="$1"
            elif [ -z "$end" ]; then
                end="$1"
            else
                usage 1
            fi
            ;;
        --)
            shift
            break;
            ;;
        *)
            break;
            ;;
    esac
    shift
done
[ -z "$end" -a -z "$separator" ] && usage 1

count=0
cat > $tmp/cur

while :; do
    if [ -n "$begin" -a -n "$end" ]; then
        ed $tmp/cur <<- EOF > /dev/null 2>&1 || exit 0	# 開始行が存在しない
	\$
	$begin
	q
	EOF
        ed $tmp/cur <<- EOF > /dev/null 2>&1 || :	# 開始行より前がない
	\$
	$begin
	1,-1d
	w
	q
	EOF

        cat ${tmp}/cur > ${tmp}/top
        ed $tmp/top <<- EOF > /dev/null 2>&1
	\$
	$end
	q
	EOF
        if [ $? -eq 0 ]; then
            ed $tmp/top <<- EOF > /dev/null 2>&1 || :	# 終了行より後がない
		\$
		$end
		+1,\$d
		w
		q
		EOF
        else						# 終了行が存在しない
            [ "$use_tail" = true  ] || exit 0
        fi
    else
        cat ${tmp}/cur > ${tmp}/top
        ed $tmp/top <<- EOF > /dev/null 2>&1 || :	# 分離子が存在しない
	\$
	${separator},\$d
	w
	q
	EOF
    fi

    "$@" < ${tmp}/top
    count=$(($count + 1))

    if [ -n "$begin" -a -n "$end" ]; then
        cmd="$end"
    else
        cmd="$separator"
    fi
    ed $tmp/cur <<- EOF > /dev/null 2>&1 || exit 0	# 終了行/分離子がない
	\$
	$cmd
	1,.d
	w
	q
	EOF
done
